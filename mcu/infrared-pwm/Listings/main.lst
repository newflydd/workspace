C51 COMPILER V9.56.0.0   MAIN                                                              07/21/2017 22:16:15 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /**
   2           * STC15F2K60S系列，红外学习和发送遥控器
   3           * 主频：19.456M（能精确实现38KHz调制波形）
   4           * 
   5           * 红外发送功能：
   6           * P02发送sendCmd1脉冲信号，通过与门，与PWM混合，发往红外发射器
   7           * P03接微动开关，下拉输入，平时低电平，有信号时高电平
   8           *
   9           * 红外解析功能：
  10           * INT0和INT1是外部中断
  11           * P3.2是INT0，P3.3是INT1
  12           * 本例通过INT0来接收HS0038的解调信号
  13           * 通过UART向上位机发送接收的红外数据
  14           */
  15          #include <STC15F2K.h>
  16          #include "ds18b20.h"
  17          #include "tools.h"
  18          
  19          #define FOSC 19456000L
  20          #define CCP_S0  0x10  //P_SW1.4
  21          #define CCP_S1  0x20  //P_SW1.5
  22          
  23          void PWM0Init(void);        /* PWM0初始化，主频19.456M，分频为38KHz */
  24          void Uart1Init(void);       /* 9600bps@19.456MHz */
  25          void T0Init(void);          /* 计时器0初始化 */
  26          void IT0Init();           /* 外部中断IT0初始化 */
  27          
  28          void sendInfraredByte(u8 dat);    /* 按字节发送红外数据 */
  29          void SendInfraredSignal(u8*);   /* 发送红外指令 */
  30          
  31          /* 红外发送功能 */
  32          sbit  SendDataPin = P0^2; /* 红外数据发射引脚，与PWM通过74HC08混合形成调制信号 */
  33          
  34          sbit  LedGreen = P0^3;
  35          sbit  LedRed   = P1^2;
  36          sbit  LedYellow= P1^0;
  37          
  38          u8 cmdOpen26[] = {0xC3, 0xE9, 0x00, 0x00, 0x04, 0x02, 0x04, 0x00, 0x00, 0x04, 0x00, 0xA0, 0xFF};
  39          u8 cmdClose26[]= {0xC3, 0xE9, 0x00, 0x00, 0x04, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xFB};
  40          
  41          /* 红外解调功能 */
  42          u8 idata buffer[128];       /* 红外接收数据区，最大长度128字节，完全满足各种红外遥控
             -器指令集 */
  43          u8 bufferLength = 0;        /* 红外接收数据区长度 */
  44          sbit IR_INPUT = P3^2;       /* 使用外部中断INT0接收红外信号 */
  45          
  46          u8  u8temp,u8temp2,i,j;
  47          u16 u16temp;
  48          volatile u8 sending;
  49          
  50          int main(){
  51   1        int temperatureInt;
  52   1        float temperature;
  53   1      
C51 COMPILER V9.56.0.0   MAIN                                                              07/21/2017 22:16:15 PAGE 2   

  54   1        EA = 1;             /* 总中断使能 */
  55   1      
  56   1        PWM0Init();           /* PWM0初始化，主频19.456M，分频为38KHz */
  57   1        Uart1Init();          /* 串口传输（串口1）初始化 */
  58   1        T0Init();           /* 计时器0初始化 */
  59   1        IT0Init();            /* 外部中断IT0初始化 */
  60   1        
  61   1        IR_INPUT  = 1;        /* 外部中断置高电平  */
  62   1      
  63   1        DS18B20_DQ = 1;         /* 18b20 数据引脚复位为高电平 */
  64   1      
  65   1        SendDataPin = 0;
  66   1      
  67   1        LedYellow = 0;
  68   1        LedRed    = 0;
  69   1        LedGreen  = 0;
  70   1      
  71   1        for(u8temp = 0; u8temp < 120; u8temp++) 
  72   1          Delay(65535);
  73   1      
  74   1        while(1){
  75   2          DS18B20_DQ = 1;         /* 18b20 数据引脚复位为高电平 */
  76   2      
  77   2          temperatureInt = Ds18b20GetTemperature();
  78   2          temperature    = Ds18b20GetTemperatureFromInt(temperatureInt);
  79   2          if(temperature >= 30.0){
  80   3            //温度大于等30度，打开空调
  81   3            sending = 1;
  82   3            SBUF = 0xAA;
  83   3            while(sending);
  84   3            SendInfraredSignal(cmdOpen26);
  85   3            LedGreen = 1;
  86   3            for(u8temp = 0; u8temp < 40; u8temp++)
  87   3              Delay(65535);
  88   3            LedGreen = 0;
  89   3          }else if(temperature <= 28.0){
  90   3            //温度小于等于28度，关闭空调
  91   3            sending = 1;
  92   3            SBUF = 0xBB;
  93   3            while(sending);
  94   3            SendInfraredSignal(cmdClose26);
  95   3            LedRed = 1;
  96   3            for(u8temp = 0; u8temp < 40; u8temp++)
  97   3              Delay(65535);
  98   3            LedRed = 0;
  99   3          }else{
 100   3            //温度适中
 101   3            sending = 1;
 102   3            SBUF = 0xCC;
 103   3            while(sending);
 104   3            LedYellow = 1;
 105   3            for(u8temp = 0; u8temp < 40; u8temp++)
 106   3              Delay(65535);
 107   3            LedYellow = 0;
 108   3          }
 109   2      
 110   2          //每5分钟左右采集1次，27*255*65535*0.675/1000/1000 = 304s
 111   2          for(u8temp2 = 0; u8temp2 < 27; u8temp2++)
 112   2            for(u8temp = 0; u8temp < 255; u8temp++)
 113   2              Delay(65535);
 114   2        }
 115   1      }
C51 COMPILER V9.56.0.0   MAIN                                                              07/21/2017 22:16:15 PAGE 3   

 116          
 117          /* PWM0初始化，主频19.456M，分频为38KHz */
 118          void PWM0Init(void){
 119   1        ACC   = P_SW1;
 120   1        ACC   &=  ~(CCP_S0|CCP_S1);   //CCP_S0=0, CCP_S1=0
 121   1        P_SW1 = ACC;          //P1.1:CCP0 , P1.0:CCP1 , P3.7:CCP2
 122   1      
 123   1        CCON = 0;   //初始化PCA控制寄存器
 124   1        CL   = 0;   //复位PCA
 125   1        CH   = 0;
 126   1        CMOD = 0x0A;  //设置PCA时钟源，sysclk/4
 127   1      
 128   1        PCA_PWM0  = 0x40;   //7位，频率 = 19456000/4/128 = 38000
 129   1        CCAP0H = CCAP0L = 0x59;   //占空比 = (0x7F - 0x59) / 0x7F = (127 - 89)/127 = 29.9%
 130   1        CCAPM0 = 0x42;
 131   1      
 132   1        CR = 1;           //PCA定时器开始工作
 133   1      }
 134          
 135          /* 串口传输（串口1）初始化 */
 136          void Uart1Init(void)    //9600bps@19.456MHz
 137          {
 138   1        SCON = 0x50;    //8位数据,可变波特率
 139   1        AUXR |= 0x40;   //定时器1时钟为Fosc,即1T
 140   1        AUXR &= 0xFE;   //串口1选择定时器1为波特率发生器
 141   1        TMOD &= 0x0F;   //设定定时器1为16位自动重装方式
 142   1        TL1  = 0x05;    //设定定时初值
 143   1        TH1  = 0xFE;    //设定定时初值
 144   1        ET1  = 0;     //禁止定时器1中断
 145   1        TR1  = 1;     //启动定时器1
 146   1        ES   = 1;     //打开串口中断
 147   1        IP   = 0x10;    //中断优先级设置，串口中断优先，可嵌套进入外部中断
 148   1      }
 149          
 150          /* 计时器0初始化 */
 151          void T0Init(void){
 152   1        TMOD &= 0xF0;
 153   1        TMOD |= 0x01;       /* 将TMOD 高4位不变，低4位置0001，使用定时器T0 */
 154   1      
 155   1        TR0 = 0;          /* TR:计时使能，置1计时，置0停止 */
 156   1        ET0 = 0;          /* ET:定时器中断使能，置1使能，置0失能 */
 157   1      }
 158          
 159          /* 外部中断IT0初始化 */
 160          void IT0Init(){
 161   1        P32 = 1;
 162   1        IT0 = 1;            /* IT:外部中断方式选择，0:上升沿下降沿都触发，1:下降沿触发 */
 163   1        EX0 = 1;            /* EX:外部中断使能，1:使能，0:失能 */
 164   1      }
 165          
 166          /**
 167           * 红外发射一个字节，从高位向低位发射
 168           * 0： 560us高电平，560us低电平
 169           * 1： 560us高电平，1690us低电平
 170           */
 171          void sendInfraredByte(uchar dat){
 172   1        uchar pos2;
 173   1      
 174   1        for(pos2 = 0; pos2 < 8; pos2++){
 175   2          if((dat & (0x80 >> pos2)) == 0x00){
 176   3            /* 发射0 */
 177   3            SendDataPin = 1;
C51 COMPILER V9.56.0.0   MAIN                                                              07/21/2017 22:16:15 PAGE 4   

 178   3            Delay(830);
 179   3            SendDataPin = 0;
 180   3            Delay(830);
 181   3            SendDataPin = 1;
 182   3          }else{
 183   3            /* 发射1 */
 184   3            SendDataPin = 1;
 185   3            Delay(830);
 186   3            SendDataPin = 0;
 187   3            Delay(2504);
 188   3            SendDataPin = 1;
 189   3          }
 190   2        }
 191   1      }
 192          
 193          /* 发射红外信号 */
 194          void SendInfraredSignal(u8* sendCmd){
 195   1        EA = 0;   /* 发送红外信号时禁止中断 */
 196   1      
 197   1        /* 9ms高电平 */
 198   1        SendDataPin = 1;
 199   1        Delay(13333);
 200   1      
 201   1        /* 4.5ms低电平 */
 202   1        SendDataPin = 0;
 203   1        Delay(6667);
 204   1      
 205   1        /**
 206   1         * 按照数组中的数据依次向外发射
 207   1         */
 208   1        for(i = 0; i < 13; i++){
 209   2          sendInfraredByte(sendCmd[i]);
 210   2        }
 211   1      
 212   1        SendDataPin = 1;
 213   1        Delay(830);
 214   1        SendDataPin = 0;
 215   1      
 216   1        EA = 1;   /* 打开中断 */
 217   1      }
 218          
 219          u16 GetLowTime(){
 220   1        TH0 = 0;
 221   1        TL0 = 0;        /* 计数器0的高低8位，初始设为0 */
 222   1      
 223   1        TR0 = 1;        /* 计数器0计时使能 */
 224   1        while(!IR_INPUT){
 225   2          if(TH0 > 0x50)    /* 如果高8位大于某一阈值，表示异常 */
 226   2            break;
 227   2        }
 228   1        TR0 = 0;        /* 计数器失能 */
 229   1        return TH0 * 256 + TL0; /* 高4位*256 + 低4位 = 计时开始后跑过的时间 */
 230   1      }
 231          
 232          u16 GetHighTime(){
 233   1        TH0 = 0;
 234   1        TL0 = 0;        /* 计数器的高低8位，初始设为0 */
 235   1      
 236   1        TR0 = 1;        /* 计数器计时使能 */
 237   1        while(IR_INPUT){
 238   2          if(TH0 > 0x50)    /* 如果高8位大于某一阈值，表示异常 */
 239   2            break;
C51 COMPILER V9.56.0.0   MAIN                                                              07/21/2017 22:16:15 PAGE 5   

 240   2        }
 241   1        TR0 = 0;        /* 计数器失能 */
 242   1        return TH0 * 256 + TL0; /* 高4位*256 + 低4位 = 计时开始后跑过的时间 */
 243   1      }
 244          
 245          /**
 246           * INT0中断入口
 247           * interrupt关键字用法
 248           * interrupt 0 : 外部中断0 P3.2
 249           * interrupt 1 : 定时器中断0
 250           * interrupt 2 : 外部中断1 P3.3
 251           * interrupt 3 : 定时器中断1
 252           * interrupt 4 : 串口中断
 253           */
 254          void INT0_Routine() interrupt 0{
 255   1        u16temp = GetLowTime();
 256   1      
 257   1        if(u16temp < 9333 || u16temp > 17333){        /* 判断是否在9ms以内 */
 258   2          bufferLength = 0;
 259   2          IE0 = 0;                    /* 软件释放IE0, 允许外部中断0再次进入 */
 260   2          return;
 261   2        }
 262   1      
 263   1        u16temp = GetHighTime();
 264   1        if(u16temp < 4666 || u16temp > 8666){       /* 判断是否在4.5ms以内 */
 265   2          bufferLength = 0;
 266   2          IE0 = 0;
 267   2          return; 
 268   2        }
 269   1      
 270   1        while(1){
 271   2          for(j = 0; j < 8; j++){
 272   3            u16temp = GetLowTime();
 273   3            if(u16temp < 581 || u16temp > 1079){        /* 判断是否是560us */
 274   4              bufferLength = 0;
 275   4              IE0 = 0;
 276   4              return;
 277   4            }
 278   3            u16temp = GetHighTime();
 279   3            if(u16temp > 581 && u16temp < 1079){        /* 接收到了0 */
 280   4              buffer[bufferLength] = buffer[bufferLength] << 1;
 281   4            }else if(u16temp > 1752 && u16temp < 3255){     /* 接收到了1 */
 282   4              buffer[bufferLength] = buffer[bufferLength] << 1;
 283   4              buffer[bufferLength] |= 0x01;
 284   4            }else if(u16temp >= 3255){              /* >=3255时表示结束位，无信号了 */
 285   4              IE0 = 0;
 286   4              u16temp = 5000;               /* 延时 */
 287   4              while(u16temp--);
 288   4      
 289   4              for(i = 0; i < bufferLength; i++){
 290   5                sending = 1;
 291   5                SBUF = buffer[i];         
 292   5                while(sending);   /* 发送每个字节后都等UART中断中将sending复位，防止错乱 */
 293   5              }     
 294   4      
 295   4              bufferLength = 0;
 296   4              return;
 297   4            }else{                        /* <=581,数据异常，重置返回 */
 298   4              IE0 = 0;
 299   4              bufferLength = 0;
 300   4              return;
 301   4            }
C51 COMPILER V9.56.0.0   MAIN                                                              07/21/2017 22:16:15 PAGE 6   

 302   3          }
 303   2      
 304   2          bufferLength++;
 305   2        }
 306   1      }
 307          
 308          void UART_Routine() interrupt 4{
 309   1        if(TI){       //本次中断是发送中断
 310   2          TI = 0;     //发送完了清零
 311   2          REN = 1;    //发送完了再接受
 312   2          sending = 0;  //清空发射标志
 313   2        }
 314   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    869    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     34       9
   IDATA SIZE       =    128    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
